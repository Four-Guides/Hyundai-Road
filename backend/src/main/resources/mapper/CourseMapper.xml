<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hyundairoad.hyundairoad.course.mapper.CourseMapper">

    <resultMap id="courseResultMap" type="com.hyundairoad.hyundairoad.course.domain.dto.CourseDetailDto">
        <id property="courseId" column="course_id"/>
        <result property="memberId" column="member_id"/>
        <result property="memberName" column="member_name"/>
        <result property="memberImage" column="member_image"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="startTime" column="start_time" javaType="java.lang.Integer"/>
        <result property="endTime" column="end_time" javaType="java.lang.Integer"/>
        <result property="withWhom" column="with_whom"/>
        <result property="theme" column="theme"/>
        <result property="visibility" column="visibility" typeHandler="com.hyundairoad.hyundairoad.typehandler.BooleanTypeHandler"/>
        <result property="courseImage" column="course_image"/>
        <result property="likeCount" column="like_count"/>
        <result property="liked" column="liked"/>
        <result property="commentId" column="comment_id"/>
        <result property="commentCount" column="comment_count"/>
        <result property="commentUserName" column="comment_user_name"/>
        <result property="commentUserImage" column="comment_user_image"/>
        <result property="commentContent" column="comment_content"/>
        <collection property="coursePlaces" ofType="com.hyundairoad.hyundairoad.course.domain.dto.CoursePlaceDto">
            <id property="coursePlaceId" column="course_place_id"/>
            <result property="courseId" column="course_id"/>
            <result property="placeId" column="place_id"/>
            <result property="memo" column="memo"/>
            <result property="rank" column="rank"/>
            <result property="image" column="image"/>
        </collection>
    </resultMap>

    <select id="getCourseDetailsById" resultMap="courseResultMap">
        SELECT
            c.course_id,
            c.member_id,
            m.name AS member_name,
            i.original AS member_image,
            c.title,
            c.content,
            c.start_time,
            c.end_time,
            c.with_whom,
            c.theme,
            c.visibility,
            ci.original AS course_image,
            (SELECT COUNT(*) FROM member_course_like WHERE course_id = c.course_id) AS like_count,
            (CASE WHEN EXISTS (SELECT 1 FROM member_course_like WHERE course_id = c.course_id AND member_id = #{memberId}) THEN 'Y' ELSE 'N' END) AS liked,
            com.comment_id,
            (SELECT COUNT(*) FROM comments WHERE course_id = c.course_id) AS comment_count,
            cm.name AS comment_user_name,
            img.original AS comment_user_image,
            com.content AS comment_content,
            cp.course_place_id,
            cp.course_id,
            cp.place_id,
            cp.memo,
            cp.rank,
            cp.image
        FROM
            course c
                JOIN member m ON c.member_id = m.member_id
                LEFT JOIN image i ON m.image_id = i.image_id
                LEFT JOIN course_place cp ON c.course_id = cp.course_id
                LEFT JOIN image cpi ON cp.course_place_id = cpi.course_place_id
                LEFT JOIN comments com ON c.course_id = com.course_id
                LEFT JOIN member cm ON com.member_id = cm.member_id
                LEFT JOIN image img ON cm.image_id = img.image_id
                LEFT JOIN image ci ON c.course_id = ci.image_id
        WHERE
            c.course_id = #{courseId}
    </select>

    <select id="getAllCourses" resultMap="courseResultMap">
        SELECT
            c.course_id,
            c.member_id,
            m.name AS member_name,
            i.original AS member_image,
            c.title,
            c.content,
            c.start_time,
            c.end_time,
            c.with_whom,
            c.theme,
            c.visibility,
            ci.original AS course_image,
            (SELECT COUNT(*) FROM member_course_like WHERE course_id = c.course_id) AS like_count,
            (CASE WHEN EXISTS (SELECT 1 FROM member_course_like WHERE course_id = c.course_id AND member_id = #{memberId}) THEN 'Y' ELSE 'N' END) AS liked,
            com.comment_id,
            (SELECT COUNT(*) FROM comments WHERE course_id = c.course_id) AS comment_count,
            cm.name AS comment_user_name,
            img.original AS comment_user_image,
            com.content AS comment_content,
            cp.course_place_id,
            cp.course_id,
            cp.place_id,
            cp.memo,
            cp.rank,
            cp.image
        FROM
            course c
                JOIN member m ON c.member_id = m.member_id
                LEFT JOIN image i ON m.image_id = i.image_id
                LEFT JOIN course_place cp ON c.course_id = cp.course_id
                LEFT JOIN image cpi ON cp.course_place_id = cpi.course_place_id
                LEFT JOIN comments com ON c.course_id = com.course_id
                LEFT JOIN member cm ON com.member_id = cm.member_id
                LEFT JOIN image img ON cm.image_id = img.image_id
                LEFT JOIN image ci ON c.course_id = ci.image_id
    </select>

    <insert id="insertCourse" useGeneratedKeys="true" keyProperty="courseId" keyColumn="course_id">
        INSERT INTO course (course_id, member_id, title, content, start_time, end_time, with_whom, theme, visibility)
        VALUES (COURSE_SEQ.NEXTVAL, #{memberId}, #{title}, #{content}, #{startTime}, #{endTime}, #{withWhom}, #{theme}, #{visibility, typeHandler=com.hyundairoad.hyundairoad.typehandler.BooleanTypeHandler})
    </insert>

    <insert id="insertCoursePlace" useGeneratedKeys="true" keyProperty="coursePlaceId" keyColumn="course_place_id">
        INSERT INTO course_place (course_place_id, course_id, place_id, memo, rank, image)
        VALUES (COURSE_PLACE_SEQ.NEXTVAL, #{courseId}, #{placeId}, #{memo}, #{rank}, #{image})
    </insert>

    <update id="updateCourse">
        UPDATE COURSE
        SET
            MEMBER_ID = #{memberId},
            TITLE = #{title},
            CONTENT = #{content},
            START_TIME = #{startTime},
            END_TIME = #{endTime},
            WITH_WHOM = #{withWhom},
            THEME = #{theme},
            VISIBILITY = #{visibility, typeHandler=com.hyundairoad.hyundairoad.typehandler.BooleanTypeHandler}
        WHERE COURSE_ID = #{courseId}
    </update>

    <update id="updateCoursePlace">
        UPDATE COURSE_PLACE
        SET
            PLACE_ID = #{placeId},
            MEMO = #{memo},
            RANK = #{rank},
            IMAGE = #{image}
        WHERE COURSE_PLACE_ID = #{coursePlaceId}
    </update>

    <delete id="deleteCoursePlaceById">
        DELETE FROM COURSE_PLACE WHERE COURSE_PLACE_ID = #{coursePlaceId}
    </delete>

    <select id="getCoursePlacesByCourseId" resultType="com.hyundairoad.hyundairoad.course.domain.dto.CoursePlaceDto">
        SELECT
            course_place_id,
            course_id,
            place_id,
            memo,
            rank,
            image
        FROM course_place
        WHERE course_id = #{courseId}
    </select>

</mapper>